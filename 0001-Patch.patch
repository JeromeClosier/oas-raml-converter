From 2a42ab503177c57ad1b200ef2d62a78f8e6ebc30 Mon Sep 17 00:00:00 2001
From: Leandro Bauret <lbauret@tekgenesis.com>
Date: Tue, 14 Mar 2017 14:17:20 -0300
Subject: [PATCH] Patch

---
 lib/importers/baseraml.js |  7 ++---
 lib/importers/raml08.js   | 65 ++++++++++++++++++++++++-----------------------
 lib/importers/raml10.js   |  2 +-
 3 files changed, 38 insertions(+), 36 deletions(-)

diff --git a/lib/importers/baseraml.js b/lib/importers/baseraml.js
index 8ee1177..4a16810 100644
--- a/lib/importers/baseraml.js
+++ b/lib/importers/baseraml.js
@@ -362,10 +362,9 @@ class RAMLImporter extends Importer {
 				sd.Name = schemaName;
 				const schema = jsonHelper.parse(schemData[index][schemaName]);
 				if (schema.hasOwnProperty('definitions')) {
-					this.addDefinitions(schema,newSchemas);
+					newSchemas = this.addDefinitions(schema,newSchemas);
 				}
-				sd.Definition = this._mapSchema(schemData[index][schemaName], true, false);
-
+				sd.Definition = this._mapSchema(schema, true, false);
 				schemas.push(sd);
 			}
 		}
@@ -378,6 +377,7 @@ class RAMLImporter extends Importer {
 
 	addDefinitions(schema, schemas) {
 		const definitions = schema.definitions;
+		if (!schemas) schemas = [];
 		for (const def in definitions) {
 			if (!definitions.hasOwnProperty(def)) continue;
 			let newSchema = {};
@@ -387,6 +387,7 @@ class RAMLImporter extends Importer {
 				schemas.push(newSchema);
 		}
 		delete schema.definitions;
+		return schemas;
 	}
 	
 	static _checkForDefaultType(schemas) {
diff --git a/lib/importers/raml08.js b/lib/importers/raml08.js
index a543e04..d8b2265 100644
--- a/lib/importers/raml08.js
+++ b/lib/importers/raml08.js
@@ -20,7 +20,7 @@ class RAML08Importer extends RAMLImporter {
 		if (methodBody.schema) {
 			const schema = jsonHelper.parse(methodBody.schema);
 			if (schema.hasOwnProperty('definitions')) {
-				this.addDefinitions(schema, this.data.schemas);
+				this.data.schemas = this.addDefinitions(schema, this.data.schemas);
 				methodBody.schema = jsonHelper.stringify(schema)
 			}
 
@@ -63,60 +63,61 @@ class RAML08Importer extends RAMLImporter {
 		return false;
 	}
 
-	static convertObjectProperty(source, isProperty) {
-		const target = Object.assign({}, source);
-		target.required = source.hasOwnProperty('required') && _.isArray(source.required)? source.required: [];
+	static convertObjectProperty(object, isProperty) {
+		object.required = object.hasOwnProperty('required') && _.isArray(object.required)? object.required: [];
 
-		if (source.hasOwnProperty('properties') && !isProperty) {
-			target.properties = {};
-			for (const paramName in source.properties) {
-				if (!source.properties.hasOwnProperty(paramName)) continue;
-				let parameter = source.properties[paramName];
+		if (object.hasOwnProperty('properties') && !isProperty) {
+			let properties = {};
+			for (const paramName in object.properties) {
+				if (!object.properties.hasOwnProperty(paramName)) continue;
+				let parameter = object.properties[paramName];
 				const param = _.isArray(parameter)? parameter[0] : parameter;
-				target.properties[paramName] = param;
-
-				if (param.hasOwnProperty('properties') && !_.isEmpty(param.properties)) {
-					target.properties[paramName] = RAML08Importer.convertObjectProperty(param);
-				}
-				if (param.hasOwnProperty('items') && !_.isEmpty(param.items)) {
-					target.properties[paramName].items = RAML08Importer.convertObjectProperty(param.items);
-				}
+				properties[paramName] = param;
 				if (param.hasOwnProperty('required')){
 					//required
-					if (param.required && !target.required.includes(paramName)) {
-						target.required.push(paramName);
+					if (param.required && !object.required.includes(paramName)) {
+						object.required.push(paramName);
 					}
 					delete param.required;
 				}
+				if (param.hasOwnProperty('properties') && !_.isEmpty(param.properties)) {
+					RAML08Importer.convertObjectProperty(properties[paramName], false);
+				}
+				if (param.hasOwnProperty('items') && !_.isEmpty(param.items)) {
+					RAML08Importer.convertObjectProperty(properties[paramName].items, false);
+				}
 			}
 		}
-		if (source.hasOwnProperty('items') && !isProperty && source.items.hasOwnProperty('properties')) {
-			target.items = this.convertObjectProperty(source.items);
+		if (object.items && !isProperty && object.items.hasOwnProperty('properties')) {
+			RAML08Importer.convertObjectProperty(object.items, false);
 		}
-		if (target.required.length == 0) {
-			delete target.required;
+		if (object.required.length == 0) {
+			delete object.required;
 		}
 
-		return target;
+		// return target;
 	}
 
 	_mapSchema(definition, isSchema, isProperty) {
-		definition = jsonHelper.parse(definition);
+		definition = (typeof definition === 'string')? jsonHelper.parse(definition) : definition;
 		if (typeof definition === 'string') return definition;
-		definition = RAML08Importer.convertObjectProperty(definition);
+		RAML08Importer.convertObjectProperty(definition);
 
 		for (const id in definition) {
 			if (!definition.hasOwnProperty(id)) continue;
 			let val = definition[id];
 			if (!isProperty) {
 				if (id === 'items') {
-					if (_.isArray(val))
-						if (val.length == 0)
-							definition[id] = {type: 'string'};
-						else
-							definition[id] = this._mapSchema(val, isSchema, false);
-					else if (!_.isArray(val) && typeof val === 'object')
+					if (_.isArray(val) && val.length == 0) {
+						definition[id] = {type: 'string'};
+					} else if (_.isArray(val) || val.hasOwnProperty('0')) {
+						for (const key in val) {
+							if (!val.hasOwnProperty(key)) continue;
+							definition[id][key] = this._mapSchema(val[key], isSchema, false);
+						}
+					} else {
 						definition[id] = this._mapSchema(val, isSchema, false);
+					}
 				}
 				else if (id === 'type') {
 					if (_.isArray(val)) {
diff --git a/lib/importers/raml10.js b/lib/importers/raml10.js
index 3f32508..ed77f4c 100644
--- a/lib/importers/raml10.js
+++ b/lib/importers/raml10.js
@@ -65,7 +65,7 @@ class RAML10Importer extends RAMLImporter {
 				schema = jsonHelper.parse(schema);
 
 			if (schema.hasOwnProperty('definitions')) {
-				this.addDefinitions(schema,this.data.types)
+				this.data.types = this.addDefinitions(schema,this.data.types)
 			}
 
 			data.body = this._mapSchema(this.convertRefToModel({
-- 
2.11.0

